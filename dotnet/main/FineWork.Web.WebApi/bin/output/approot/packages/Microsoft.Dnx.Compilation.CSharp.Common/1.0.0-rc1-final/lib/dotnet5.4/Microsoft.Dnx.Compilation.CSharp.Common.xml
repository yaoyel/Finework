<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Dnx.Compilation.CSharp.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Dnx.Compilation.CSharp.CultureInfoCache">
            <summary>
            Contains a list of known culture names that can be used to create a <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Dnx.Compilation.CSharp.CultureInfoCache.KnownCultureNames">
            <summary>
            This list of known cultures was generated by CultureInfoGenerator using .NET Framework 4.6 RC or later on
            Microsoft Windows NT 6.2.9200.0.
            As new versions of .NET Framework and Windows are released, this list should be regenerated to ensure it
            contains the latest culture names.
            </summary>
        </member>
        <member name="T:Microsoft.Dnx.Compilation.CSharp.MetadataReferenceExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Dnx.Compilation.IMetadataReference"/>
            </summary>
        </member>
        <member name="M:Microsoft.Dnx.Compilation.CSharp.MetadataReferenceExtensions.ConvertMetadataReference(Microsoft.Dnx.Compilation.IMetadataReference,System.Func{Microsoft.Dnx.Compilation.IMetadataFileReference,Microsoft.CodeAnalysis.AssemblyMetadata})">
            <summary>
            Converts an <see cref="T:Microsoft.Dnx.Compilation.IMetadataReference"/> to a <see cref="T:Microsoft.CodeAnalysis.MetadataReference"/> instance.
            </summary>
            <param name="metadataReference">The <see cref="T:Microsoft.Dnx.Compilation.IMetadataReference"/> to convert.</param>
            <param name="assemblyMetadataFactory">Factory invoked to get instances of <see cref="T:Microsoft.CodeAnalysis.AssemblyMetadata"/>.</param>
            <returns>The converted <see cref="T:Microsoft.CodeAnalysis.MetadataReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Dnx.Compilation.CSharp.MetadataReferenceExtensions.CreateAssemblyMetadata(Microsoft.Dnx.Compilation.IMetadataFileReference)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.AssemblyMetadata"/> for the assembly specified by <paramref name="fileReference"/>.
            </summary>
            <param name="fileReference">The <see cref="T:Microsoft.Dnx.Compilation.IMetadataFileReference"/>.</param>
            <returns>An <see cref="T:Microsoft.CodeAnalysis.AssemblyMetadata"/>.</returns>
        </member>
        <member name="T:Microsoft.Dnx.Compilation.CSharp.RoslynCompilationException">
            <summary>
            An implementation of <see cref="T:Microsoft.Dnx.Compilation.ICompilationException"/> representing Roslyn compilation exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.Dnx.Compilation.CSharp.RoslynCompilationException.#ctor(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},System.Runtime.Versioning.FrameworkName)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Dnx.Compilation.CSharp.RoslynCompilationException"/>.
            </summary>
            <param name="assemblyName">The assembly that produced the compilation exception.</param>
            <param name="diagnostics">Diagnostics from Roslyn compilation.</param>
            <param name="targetFramework">Target framework the compilation exection is thrown from.</param>
        </member>
        <member name="P:Microsoft.Dnx.Compilation.CSharp.RoslynCompilationException.Diagnostics">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> from Roslyn compilation.
            </summary>
        </member>
        <member name="P:Microsoft.Dnx.Compilation.CSharp.RoslynCompilationException.TargetFramework">
            <summary>
            Gets the <see cref="T:System.Runtime.Versioning.FrameworkName"/> representing the framework targeted by the compilation
            </summary>
        </member>
        <member name="P:Microsoft.Dnx.Compilation.CSharp.RoslynCompilationException.CompilationFailures">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Dnx.Runtime.Common.DependencyInjection.ActivatorUtilities">
            <summary>
            Helper code for the various activator services.
            </summary>
        </member>
        <member name="M:Microsoft.Dnx.Runtime.Common.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <param name="services"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dnx.Runtime.Common.DependencyInjection.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type)">
            <summary>
            Instantiate an object of the given type, using constructor service injection if possible.
            </summary>
            <param name="services"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dnx.Runtime.Common.DependencyInjection.ActivatorUtilities.CreateInstance``1(System.IServiceProvider)">
            <summary>
            Instantiate an object of the given type, using constructor service injection if possible.
            </summary>
            <param name="services"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Dnx.Runtime.Common.DependencyInjection.ActivatorUtilities.CreateFactory(System.Type)">
            <summary>
            Creates a factory to instantiate a type using constructor service injection if possible.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
